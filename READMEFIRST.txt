Connor Armand du Plooy
u16169532
connorarmand.duplooy@gmail.com
0769202578 - My caller ID is broken , if you do call and I do not answer leave me an SMS and I will call back.

Getting started:
      1.) Make sure all the listed dependencies are working ( $PATH is correctly configured etc )
      2.) Run make ( the default target will compile everything and run the examples)

Navigation:
      All source, header files  are in the src directory;
      Qt build files are in the Qt directory;
      Documentation is in the documentation directory;
      Most files in this directory are ignored by a .gitignore ; If you have an editor that is set up to ignore VCS ignored files they will not display, use the terminal to see these if you really need to ( an example might be index.html generated by doxygen)

Something went wrong:
      In the case my code fails to compile due to a missing dependancy , untar the archive backup.tar.gz ; It will contain 3 binaries which have been precompiled on ubuntu ( it should work for any unix-like system ).
      You can run any of the binaries to see some of the project.
      demo.out -> A demonstration with scenarios.
      a.out -> The command line interface example.
      qt.out -> The graphical user interface example ( Please note this one in particular is just a rough idea of what could be done)

      Alternaively you can try to compile my code using the provided makefile by running the targets compile_bind_main , compile_bind_all and demo ;
      You will have to run the generated binaries manually though.

      A sh script (running bash on it will result in syntax errors) is included which will install qt ( needed to compile the GUI ) , using either pacman or aptitude. The package name is qt5-default.
      You can run it by typing ./setup.sh ( the executable flag is set ) ; otherwise try sh ./setup.sh
      This script needs root rights but will prompt you for it.

      If none of the above solutions worked , please contact me.


Additional Notes:
      When using the CLI , you can use memento's undo by typing undo when prompted for a username.
      A ticketprinter is dynamically linked to all auditoriums created in the CLI. This functionality as well as the
            memento is optional;
      Memento is implemented as a basic interpreter ; as to not store entire objects in memory.
      The entire project is maintaned using git , if something goes seriously wrong I can give you access to the repository. There are multiple stable releases.
       The doxygen config file is configured to generate html , you can open it by opening documentation/index.html in your browser.
       My documentation will be in listed as documentation/COS121.pdf
       JPEG versions of my UML diagrams are in the documentation directory , I apologise for the watermakrs ( as explained in the PDF)
